--- bd_packet_module_v1.vhd	2020-08-25 10:53:15.087946000 +0200
+++ bd_packet_module_v2.vhd	2020-08-30 19:19:11.301968000 +0200
@@ -48,15 +48,20 @@
 		s_axi_ro : OUT axi3ml_read_in_r;
 		s_axi_ri : IN axi3ml_read_out_r;
 		s_axi_wo : OUT axi3ml_write_in_r;
-		s_axi_wi : IN axi3ml_write_out_r
+		s_axi_wi : IN axi3ml_write_out_r;
+        LVDS_O_bd: OUT std_logic;
+		LVDS_I_bd: IN std_logic;
+	    LVDS_clk_bd : out std_logic;
+		LVDS_tristate_bd : out std_logic
 
 	);
 
 END ENTITY bd_packet_module;
 ARCHITECTURE RTL OF bd_packet_module IS
-      SIGNAL command_reg_M       : std_logic_vector(15 DOWNTO 0); -- Command Reg Master
+    SIGNAL command_reg_M       : std_logic_vector(15 DOWNTO 0); -- Command Reg Master
 	SIGNAL command_reg_M_valid : std_logic;
 	SIGNAL data_reg_M          : std_logic_vector(15 DOWNTO 0); -- Data Reg Master
+    SIGNAL data_reg_M_out      : std_logic_vector(15 DOWNTO 0); -- Data Reg Master receive
 	SIGNAL data_reg_M_valid    : std_logic;
 	SIGNAL command_reg_S       : std_logic_vector(15 DOWNTO 0); -- Command Reg Slave
 	SIGNAL data_reg_S          : std_logic_vector(15 DOWNTO 0); -- Data Reg Slave
@@ -76,8 +81,11 @@
 			command_in       : IN std_logic_vector(COMMAND_LEN - 1 DOWNTO 0);
 			command_valid_in : IN std_logic;
 			------------- DATA IO channel ------------
-			LVDS_IO    : INOUT std_logic;
+			LVDS_I    : IN std_logic;
+			LVDS_O    : OUT std_logic;
 			LVDS_clock : OUT std_logic;
+			LVDS_tristate   : out std_logic;
+
 			------- Data channel
 			data_in        : IN std_logic_vector(DATA_LEN - 1 DOWNTO 0);
 			data_valid_in  : IN std_logic;
@@ -137,28 +145,15 @@
 		reset            => '0',
 		command_in       => command_reg_M,
 		command_valid_in => command_reg_M_valid,
-		LVDS_IO          => LVDS_data_test,
-		LVDS_clock       => LVDS_clk_test,
+		LVDS_I          => LVDS_I_bd,
+		LVDS_O          => LVDS_O_bd,
+		LVDS_clock       => LVDS_clk_bd,
+		LVDS_tristate    => LVDS_tristate_bd,
 		data_in          => data_reg_M,
-		data_valid_in    => data_reg_M_valid
+		data_valid_in    => data_reg_M_valid,
+		data_out         => data_reg_M_out
 	);
 
-	Packet_Layer_Slave_Component : packet_layer_slave
-	GENERIC MAP(
-		DATA_LEN    => 16,
-		ADDRESS_LEN => 5,
-		COMMAND_LEN => 16
-	)
-	PORT MAP(
-		clk_top         => S_AXI_ACLK,
-		reset           => '0',
-		command_out     => command_reg_S,
-		LVDS_IO         => LVDS_data_test,
-		LVDS_clock      => LVDS_clk_test,
-		data_in_S => (OTHERS => '0'),
-		data_valid_in_S => '0',
-		data_out_S      => data_reg_S
-	);
 
 	-------------------------------------------------------------
 	----------------- AXI Lite Slave Process --------------------
@@ -222,8 +217,8 @@
 					arready_v := '0';         -- done with addr
 						------ ADD ADDRESS BASED CONDITIONS FOR COMMAND AND DATA REG
 						IF addr_v = x"40000008" THEN
-							rdata_v(15 downto 0)   := command_reg_S; -- OUTPUT DATA REGISTER
-							rdata_v(31 downto 16)   := data_reg_S;
+							rdata_v(31 downto 16)   := x"1212"; -- OUTPUT DATA REGISTER
+							rdata_v(15 downto 0)   := data_reg_M_out;
 							rresp_v   := "00";          -- okay
 						ELSIF addr_v = x"40000012"  THEN
 							rdata_v(15 downto 0)   := data_reg_S; -- OUTPUT DATA REGISTER
